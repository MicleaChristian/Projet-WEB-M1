name: CI/CD Pipeline

on:
  push:
    branches: [ main, jimmy ]
  pull_request:
    branches: [ main, jimmy ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: document_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linter
      working-directory: ./backend
      run: npm run lint

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:cov
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_NAME: document_management_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key

    - name: Run e2e tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_NAME: document_management_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build application
      working-directory: ./backend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: backend/dist/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run dependency check
      working-directory: ./backend
      run: npx audit-ci --moderate

  docker:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: secure-docs-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name test-container -d \
          -e DATABASE_HOST=host.docker.internal \
          -e DATABASE_PORT=5432 \
          -e DATABASE_USERNAME=postgres \
          -e DATABASE_PASSWORD=postgres \
          -e DATABASE_NAME=document_management \
          -e REDIS_HOST=host.docker.internal \
          -e REDIS_PORT=6379 \
          -p 4000:4000 \
          secure-docs-backend:latest
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:4000/health || exit 1
        
        docker stop test-container

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Docker: ${{ needs.docker.result }}"

    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Docker: ${{ needs.docker.result }}"
        exit 1 